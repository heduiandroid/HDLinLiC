package com.linli.consumer.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.linli.consumer.bean.GoodsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_BEAN".
*/
public class GoodsBeanDao extends AbstractDao<GoodsBean, Long> {

    public static final String TABLENAME = "GOODS_BEAN";

    /**
     * Properties of entity GoodsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GoodId = new Property(1, long.class, "goodId", false, "GOOD_ID");
        public final static Property GoodsName = new Property(2, String.class, "goodsName", false, "GOODS_NAME");
        public final static Property GoodsSpec = new Property(3, long.class, "goodsSpec", false, "GOODS_SPEC");
        public final static Property GoodsSpecName = new Property(4, String.class, "goodsSpecName", false, "GOODS_SPEC_NAME");
        public final static Property Inventory = new Property(5, int.class, "inventory", false, "INVENTORY");
        public final static Property Ispackagecost = new Property(6, int.class, "ispackagecost", false, "ISPACKAGECOST");
        public final static Property Number = new Property(7, int.class, "number", false, "NUMBER");
        public final static Property Price = new Property(8, double.class, "price", false, "PRICE");
        public final static Property ImagePath = new Property(9, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property IsChoice = new Property(10, boolean.class, "isChoice", false, "IS_CHOICE");
        public final static Property ShopId = new Property(11, long.class, "shopId", false, "SHOP_ID");
        public final static Property ShopName = new Property(12, String.class, "shopName", false, "SHOP_NAME");
        public final static Property Type = new Property(13, int.class, "type", false, "TYPE");
    };


    public GoodsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"GOOD_ID\" INTEGER NOT NULL ," + // 1: goodId
                "\"GOODS_NAME\" TEXT," + // 2: goodsName
                "\"GOODS_SPEC\" INTEGER NOT NULL ," + // 3: goodsSpec
                "\"GOODS_SPEC_NAME\" TEXT," + // 4: goodsSpecName
                "\"INVENTORY\" INTEGER NOT NULL ," + // 5: inventory
                "\"ISPACKAGECOST\" INTEGER NOT NULL ," + // 6: ispackagecost
                "\"NUMBER\" INTEGER NOT NULL ," + // 7: number
                "\"PRICE\" REAL NOT NULL ," + // 8: price
                "\"IMAGE_PATH\" TEXT," + // 9: imagePath
                "\"IS_CHOICE\" INTEGER NOT NULL ," + // 10: isChoice
                "\"SHOP_ID\" INTEGER NOT NULL ," + // 11: shopId
                "\"SHOP_NAME\" TEXT," + // 12: shopName
                "\"TYPE\" INTEGER NOT NULL );"); // 13: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodsBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGoodId());
 
        String goodsName = entity.getGoodsName();
        if (goodsName != null) {
            stmt.bindString(3, goodsName);
        }
        stmt.bindLong(4, entity.getGoodsSpec());
 
        String goodsSpecName = entity.getGoodsSpecName();
        if (goodsSpecName != null) {
            stmt.bindString(5, goodsSpecName);
        }
        stmt.bindLong(6, entity.getInventory());
        stmt.bindLong(7, entity.getIspackagecost());
        stmt.bindLong(8, entity.getNumber());
        stmt.bindDouble(9, entity.getPrice());
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(10, imagePath);
        }
        stmt.bindLong(11, entity.getIsChoice() ? 1L: 0L);
        stmt.bindLong(12, entity.getShopId());
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(13, shopName);
        }
        stmt.bindLong(14, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodsBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGoodId());
 
        String goodsName = entity.getGoodsName();
        if (goodsName != null) {
            stmt.bindString(3, goodsName);
        }
        stmt.bindLong(4, entity.getGoodsSpec());
 
        String goodsSpecName = entity.getGoodsSpecName();
        if (goodsSpecName != null) {
            stmt.bindString(5, goodsSpecName);
        }
        stmt.bindLong(6, entity.getInventory());
        stmt.bindLong(7, entity.getIspackagecost());
        stmt.bindLong(8, entity.getNumber());
        stmt.bindDouble(9, entity.getPrice());
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(10, imagePath);
        }
        stmt.bindLong(11, entity.getIsChoice() ? 1L: 0L);
        stmt.bindLong(12, entity.getShopId());
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(13, shopName);
        }
        stmt.bindLong(14, entity.getType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GoodsBean readEntity(Cursor cursor, int offset) {
        GoodsBean entity = new GoodsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // goodId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goodsName
            cursor.getLong(offset + 3), // goodsSpec
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // goodsSpecName
            cursor.getInt(offset + 5), // inventory
            cursor.getInt(offset + 6), // ispackagecost
            cursor.getInt(offset + 7), // number
            cursor.getDouble(offset + 8), // price
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // imagePath
            cursor.getShort(offset + 10) != 0, // isChoice
            cursor.getLong(offset + 11), // shopId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // shopName
            cursor.getInt(offset + 13) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodsBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGoodId(cursor.getLong(offset + 1));
        entity.setGoodsName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGoodsSpec(cursor.getLong(offset + 3));
        entity.setGoodsSpecName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setInventory(cursor.getInt(offset + 5));
        entity.setIspackagecost(cursor.getInt(offset + 6));
        entity.setNumber(cursor.getInt(offset + 7));
        entity.setPrice(cursor.getDouble(offset + 8));
        entity.setImagePath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsChoice(cursor.getShort(offset + 10) != 0);
        entity.setShopId(cursor.getLong(offset + 11));
        entity.setShopName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setType(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GoodsBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GoodsBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
